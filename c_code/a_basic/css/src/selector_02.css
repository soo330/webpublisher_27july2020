@charset "UTF-8";
/* selector_02.css */
#wrap {width: 900px; height: auto;
  margin-bottom: 500px;}

ul,li {margin: 0; padding:0; list-style: none;}

.nth_child_01 {
  width: 50px; height:auto;
  background-color: #aac;
}

.nth_child_01 > li {
  width: 100%; height: 20px;
  border-width: 1px;
  border-style: solid;
  border-color:#777;
}

/** :nth-child 기능:
  * nth-child는 반드시 연속되어진 요소끼리 처리하는 형태
  (중간에 다른 요소가 끼면 안됨)
  * 가급적이면 중간에 다른요소가 들어갈 수 없는 요소에서 사용하는것이 좋다.


1. 3번째 요소에 글씨색을 빨간색으로 처리
2. 뒤에서 2번째 요소에 글씨색을 암적색으로 처리
3. 마지막 요소, 첫번째 요소 글씨 노란색
4. 4번 째마다 배격색상을 회색으로 처리
5. 4번 째 마다 첫번 째에 해당하는 요소에 글씨굵기를 굵게 처리
6. 4번째 마다에서 4번째 바로 전에 해당하는 요소에 글씨 크기를 조금더 작게 처리
7. 5번째부터 7 번째까지 글씨의 밑줄 생성
*/

/* .color {color: #f00;} */
.nth_child_01 > li:nth-child(3){color:#f00;}
.nth_child_01 > li:nth-last-child(2){color: #b00;}

/* .nth_child_01 > li:nth-last-child(2){color: #b00;}
n번째있는 마지막에서 두번째 아이로 해석한다
*/
.nth_child_01 > li:last-child,
.nth_child_01 > li:first-child {color:#fa0;}

/* 4*n 이라는 뜻으로서 -> 4*1, 4*2, 4*3... 는 n번째라고 해석한다 */
.nth_child_01 > li:nth-child(4n){background-color:#ccc;}
.nth_child_01 > li:nth-child(4n+1){font-weight: 900;}
.nth_child_01 > li:nth-child(4n-1){font-size: 0.8rem;}

/* 
.nth_child_01 > li:nth-child(4n-1){font-size: 0.8rem;}
는 4개중에 3번째마다 폰트사이즈 작게
font-weight 글씨에 굵기를 준다 */
.nth_child_01 > li:nth-child(5){text-decoration: underline;}
.nth_child_01 > li:nth-child(n+5):nth-child(-n+7) {text-decoration: underline;}

/*
5번째부터(n) - 7까지(n) 매게가 되는 변수라고만 이해하자
어떤 아이 기준부터 어떤 아이 기준까지 (명확하지 않지만 n번째라는 개념으로 이해해보자
후자에 오는 친구는 괄호안 숫자앞에 - 를 사용함으로 여기까지라는 의미로 표현
*/

/* ============================================= */
.nth_child_02 {
  width: 70px; height: auto;
  padding: 5px; background-color:#ddd;
}

h3,p{margin:0; padding:0;}

.nth_child_02 > * {
  border: 1px solid #777;
}
/* 
p요소 중에서 3번째 요소에 배경 색상 #acf을 주자
p 요소중 첫번째, 마지막 요소에 배경색 #fa0
*/

.nth_child_02 > p:nth-of-type(3){background-color:#acf;}
.nth_child_02 > p:first-of-type,
.nth_child_02 > p:last-of-type {background-color:#fa0;}

/* :nth-of-type() 는 "연속되지 않는 상황"에서 동일한 요소, 동일 태그를 가지고 쓰는 요소이다
 * 동일한 레벨의 요소에서 (형제중에서)
 연속되어있지 않은 요소들이라도, 동일한 타입 즉 타입(태그)인 선택하여 처리하는 기능이다

 * p:nth-of-type() p타입으로 된 ()번째 중에서 처리한다

*/

/* ============================================= */
dl,dt,dd {margin: 0; padding: 0;}

.siblings,
.siblings_02 {
  width: 400px; height: auto;
  padding:5px;
  background-color:#daa;
}

.siblings> dt,
.siblings_02 > dt {width: 100%; height: 25px;
background-color: #077;
border-bottom:2px solid #fff; 
color: #fff; font-weight: 900;}

.siblings > dd, 
.siblings_02 > dd {width: 100%; height: 0;
  background-color: #dfdfdf;
overflow-y: hidden;
}

/* 
 *overflow-y: scroll; y축에만 스크롤을 주겠다
 *overflow: hidden; y축에만 스크롤을 주겠다
 *cursor:pointer; 링크가 되는것처럼 마우스를 손가락 모양쓰겠다
 *cursor:pointer; 커서를 물음표로
*/

.siblings> dt:hover,
.siblings_02> dt:hover {background-color: #07a; cursor:pointer;}

.siblings > dt:hover + dd {height: 50px;}
.siblings_02 > dt:hover ~ dd {height: 50px;}

/* 형제 선택자
~ 형제 선택자중 먼저 선택한 요소의 뒤에오는
모든 선택요소를 의미한다

dt:hover+dd 형제 선택자중 인접하여 붙어있는 바로 뒤의 선택 요소

* .siblings > dt:hover~dd {}
dt와 이웃하는 dd까지 적용해라
dt에 hover하면 뒤에오는 dd까지 적용해라
*/

.siblings_02 dd {
  transition: all 500ms ease-out;
  margin-bottom:5px;}

/*
  transition 단회선의 애니메이션
  animation 다회선의 애니메이션
*/